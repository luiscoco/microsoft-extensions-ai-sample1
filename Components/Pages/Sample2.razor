@page "/chat2"

@inject IJSRuntime JSRuntime

<h3>Chat with AI</h3>

<div class="mb-3">
    <label for="userInput" class="form-label">Your Question:</label>
    <input type="text" id="userInput" @bind="userInputText" class="form-control" />
</div>

<button class="btn btn-primary" @onclick="SendMessage">Send</button>

<div class="mt-4">
    <h5>Conversation:</h5>
    <div class="border p-3 rounded" style="min-height: 100px;">
        @if (conversationHistory.Count > 0)
        {
            <ul>
                @foreach (var message in conversationHistory)
                {
                    <li>@message</li>
                }
            </ul>
        }
        else
        {
            <span class="text-muted">No conversation yet.</span>
        }
    </div>
</div>

@code {
    private string userInputText = string.Empty;
    private List<string> conversationHistory = new List<string>();

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(userInputText))
        {
            // Store user's message in the conversation
            conversationHistory.Add($"User: {userInputText}");

            // Get AI response
            var aiResponse = await ChatWithAI(userInputText);

            // Store AI response in the conversation
            conversationHistory.Add($"AI: {aiResponse}");

            // Clear the input field after sending
            userInputText = string.Empty;
        }
    }

    private async Task<string> ChatWithAI(string userMessage)
    {
        var endpoint = new Uri("https://models.inference.ai.azure.com");
        var modelId = "gpt-4o-mini";
        var credential = new AzureKeyCredential(Environment.GetEnvironmentVariable("GH_TOKEN"));

        IChatClient client =
          new ChatCompletionsClient(endpoint, credential)
              .AsChatClient(modelId);


        // Example conversation context
        var conversation = new[]
        {
            new ChatMessage(Microsoft.Extensions.AI.ChatRole.System, "You are a helpful AI assistant"),
            new ChatMessage(Microsoft.Extensions.AI.ChatRole.User, userInputText)
        };

        var response = await client.CompleteAsync(userInputText);

        // Assuming the response structure has message content like this
        var message = response.Choices.FirstOrDefault()?.Text?.ToString();

        return message ?? "No response received.";
    }
}
